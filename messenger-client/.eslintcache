[{"/home/mukul/mukul/messenger/messenger-client/src/index.tsx":"1","/home/mukul/mukul/messenger/messenger-client/src/components/main.tsx":"2","/home/mukul/mukul/messenger/messenger-client/src/components/home/home.tsx":"3","/home/mukul/mukul/messenger/messenger-client/src/components/home/home.render.tsx":"4","/home/mukul/mukul/messenger/messenger-client/src/components/login/login.tsx":"5","/home/mukul/mukul/messenger/messenger-client/src/components/login/login.render.tsx":"6","/home/mukul/mukul/messenger/messenger-client/src/shared/material-modules.ts":"7","/home/mukul/mukul/messenger/messenger-client/src/shared/utils.ts":"8","/home/mukul/mukul/messenger/messenger-client/src/redux/index.ts":"9","/home/mukul/mukul/messenger/messenger-client/src/utils/routes.ts":"10","/home/mukul/mukul/messenger/messenger-client/src/components/profile/profile.tsx":"11","/home/mukul/mukul/messenger/messenger-client/src/components/thridpartylogin/thridpartylogin.tsx":"12","/home/mukul/mukul/messenger/messenger-client/src/shared/components/toast/toast.tsx":"13","/home/mukul/mukul/messenger/messenger-client/src/redux/reducers.ts":"14","/home/mukul/mukul/messenger/messenger-client/src/components/profile/profile.render.tsx":"15","/home/mukul/mukul/messenger/messenger-client/src/components/home/home-components/navbar/navbar.tsx":"16","/home/mukul/mukul/messenger/messenger-client/src/components/home/home-components/chat-section/chat.tsx":"17","/home/mukul/mukul/messenger/messenger-client/src/components/home/home-components/requests/request.tsx":"18","/home/mukul/mukul/messenger/messenger-client/src/components/home/home-components/chat-section/chat.render.tsx":"19","/home/mukul/mukul/messenger/messenger-client/src/components/home/home-components/navbar/navbar.render.tsx":"20","/home/mukul/mukul/messenger/messenger-client/src/components/home/home-components/requests/requestRender.tsx":"21","/home/mukul/mukul/messenger/messenger-client/src/redux/actions.ts":"22","/home/mukul/mukul/messenger/messenger-client/src/shared/components/backdrop/backdrop.tsx":"23","/home/mukul/mukul/messenger/messenger-client/src/utils/server.ts":"24","/home/mukul/mukul/messenger/messenger-client/src/utils/server-routes.ts":"25","/home/mukul/mukul/messenger/messenger-client/src/shared/components/otp/otp.tsx":"26","/home/mukul/mukul/messenger/messenger-client/src/components/home/home-components/chat-section/chat-components/chat-friends/chat-friends.tsx":"27","/home/mukul/mukul/messenger/messenger-client/src/components/home/home-components/chat-section/chat-components/message-area/message-area.render.tsx":"28","/home/mukul/mukul/messenger/messenger-client/src/components/home/home-components/chat-section/chat-components/chat-friends/chat-friends-render.tsx":"29","/home/mukul/mukul/messenger/messenger-client/src/shared/localstorage.service.ts":"30","/home/mukul/mukul/messenger/messenger-client/src/shared/services/request.sent.tsx":"31","/home/mukul/mukul/messenger/messenger-client/src/shared/services/request.incoming.tsx":"32","/home/mukul/mukul/messenger/messenger-client/src/shared/services/request.search.tsx":"33","/home/mukul/mukul/messenger/messenger-client/src/shared/services/messages.reducer.ts":"34","/home/mukul/mukul/messenger/messenger-client/src/components/home/home-components/chat-section/chat-components/message-area/message-area.tsx":"35","/home/mukul/mukul/messenger/messenger-client/src/components/home/socket.context.tsx":"36"},{"size":345,"mtime":1612455113719,"results":"37","hashOfConfig":"38"},{"size":2736,"mtime":1613307626251,"results":"39","hashOfConfig":"38"},{"size":1754,"mtime":1613234854554,"results":"40","hashOfConfig":"38"},{"size":2080,"mtime":1613329243123,"results":"41","hashOfConfig":"38"},{"size":4112,"mtime":1613064211494,"results":"42","hashOfConfig":"38"},{"size":3881,"mtime":1613224655680,"results":"43","hashOfConfig":"38"},{"size":3159,"mtime":1613224592130,"results":"44","hashOfConfig":"38"},{"size":2233,"mtime":1613307305670,"results":"45","hashOfConfig":"38"},{"size":269,"mtime":1612459925845,"results":"46","hashOfConfig":"38"},{"size":416,"mtime":1612902507826,"results":"47","hashOfConfig":"38"},{"size":3304,"mtime":1613180094395,"results":"48","hashOfConfig":"38"},{"size":2553,"mtime":1613231584878,"results":"49","hashOfConfig":"38"},{"size":1245,"mtime":1612645968517,"results":"50","hashOfConfig":"38"},{"size":1767,"mtime":1613311979923,"results":"51","hashOfConfig":"38"},{"size":3488,"mtime":1612552525843,"results":"52","hashOfConfig":"38"},{"size":149,"mtime":1612456651219,"results":"53","hashOfConfig":"38"},{"size":141,"mtime":1612456571511,"results":"54","hashOfConfig":"38"},{"size":7114,"mtime":1613327158789,"results":"55","hashOfConfig":"38"},{"size":1076,"mtime":1613308769136,"results":"56","hashOfConfig":"38"},{"size":2014,"mtime":1613307436194,"results":"57","hashOfConfig":"38"},{"size":8919,"mtime":1613327051624,"results":"58","hashOfConfig":"38"},{"size":480,"mtime":1613311137882,"results":"59","hashOfConfig":"38"},{"size":710,"mtime":1612460526974,"results":"60","hashOfConfig":"38"},{"size":5795,"mtime":1613307466067,"results":"61","hashOfConfig":"38"},{"size":801,"mtime":1613177897574,"results":"62","hashOfConfig":"38"},{"size":4850,"mtime":1612384440450,"results":"63","hashOfConfig":"38"},{"size":2390,"mtime":1613309019335,"results":"64","hashOfConfig":"38"},{"size":3653,"mtime":1613310827522,"results":"65","hashOfConfig":"38"},{"size":2500,"mtime":1613308423323,"results":"66","hashOfConfig":"38"},{"size":889,"mtime":1613064386863,"results":"67","hashOfConfig":"38"},{"size":1536,"mtime":1613181527488,"results":"68","hashOfConfig":"38"},{"size":1945,"mtime":1613181525668,"results":"69","hashOfConfig":"38"},{"size":2389,"mtime":1613220513169,"results":"70","hashOfConfig":"38"},{"size":2755,"mtime":1613311962398,"results":"71","hashOfConfig":"38"},{"size":2129,"mtime":1613329921485,"results":"72","hashOfConfig":"38"},{"size":949,"mtime":1613329781250,"results":"73","hashOfConfig":"38"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},"1ailxs8",{"filePath":"77","messages":"78","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79","usedDeprecatedRules":"76"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"82","usedDeprecatedRules":"76"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"85","messages":"86","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"87","usedDeprecatedRules":"76"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"100","usedDeprecatedRules":"76"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"103","usedDeprecatedRules":"76"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"108","usedDeprecatedRules":"76"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"111","usedDeprecatedRules":"76"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"118","messages":"119","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"120","usedDeprecatedRules":"76"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"123","usedDeprecatedRules":"76"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"126","messages":"127","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":2,"source":"132","usedDeprecatedRules":"76"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"137","usedDeprecatedRules":"76"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"140","usedDeprecatedRules":"76"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"143","usedDeprecatedRules":"76"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"146","usedDeprecatedRules":"76"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"151","messages":"152","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"153","messages":"154","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"157","messages":"158","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"159","messages":"160","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/mukul/mukul/messenger/messenger-client/src/index.tsx",[],["161","162"],"/home/mukul/mukul/messenger/messenger-client/src/components/main.tsx",["163","164"],"import React, { useEffect, useState } from 'react';\nimport {\n    BrowserRouter,\n    Switch,\n    Route,\n    Redirect,\n    useHistory,\n} from \"react-router-dom\";\nimport Routes from '../utils/routes';\nimport Home from './home/home'\nimport Login from './login/login'\nimport './main.scss'\nimport Profile from './profile/profile';\nimport ThirdPartyLogin from './thridpartylogin/thridpartylogin';\nimport ToastMessage from '../shared/components/toast/toast';\nimport BackdropLoader from '../shared/components/backdrop/backdrop';\nimport { logoutService, toastMessage } from '../shared/utils';\nimport { useDispatch } from 'react-redux';\nimport actions, { MESSAGE_ACTIONS } from '../redux/actions';\nimport API from '../utils/server';\nimport BermudaTriangle from '../shared/localstorage.service';\n\nexport default function Main() {\n    const defaultRedirect = () => <Redirect to={Routes.login} />;\n    const [intercepted, setIntercept] = useState(false)\n    const dispatch = useDispatch()\n    useEffect(() => {\n        dispatch({ type : actions.SHOW_LOADER })\n        API.initApiInterceptor();\n        toastMessage.subscribe((data) => {\n            if (data.logout) {\n                localStorage.clear();\n                dispatch({ type : actions.STORE_USER, data : { name : null, image : null } })\n                setTimeout(() => window.location.href = Routes.default, 2000)\n            }\n            dispatch({ type : actions.TOAST_MESSAGE, data : { message : data.message, type : data.type } })\n        })\n        logoutService.subscribe(() => {\n            dispatch({ type : actions.RESET_USER })\n            dispatch({ type : MESSAGE_ACTIONS.RESET_FRIENDS })\n            BermudaTriangle.clearTriangle();\n            window.location.href='/login'\n        })\n        setIntercept(true)\n        dispatch({ type : actions.STOP_LOADER })\n    },[])\n    return (\n        <>\n            {\n                intercepted ? \n                <>\n                    <BackdropLoader/>\n                    <ToastMessage/>\n                    <BrowserRouter>\n                        <Switch>\n                            <Route path={Routes.login} component={Login}></Route>\n                            <Route path={Routes.home} component={Home}></Route>\n                            <Route path={Routes.profile} component={Profile}></Route>\n                            <Route path={Routes.thridPartyLogin} component={ThirdPartyLogin}></Route>\n                            <Route path={Routes.notFound} component={defaultRedirect}></Route>\n                            <Route path={Routes.default} component={defaultRedirect}></Route>\n                        </Switch>\n                    </BrowserRouter>\n                </>:null\n            }\n        </>\n    )\n}\n","/home/mukul/mukul/messenger/messenger-client/src/components/home/home.tsx",["165","166"],"import React, { useEffect, useReducer } from 'react'\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useHistory } from 'react-router-dom';\nimport { IResponse } from '../../interfaces/data-models';\nimport actions from '../../redux/actions';\nimport { setGlobalToggleFunc, toastMessage } from '../../shared/utils'\nimport API from '../../utils/server';\nimport HomeRender from './home.render'\nexport default function Home() {\n    const dispatch = useDispatch()\n    const history = useHistory();\n    const userService = useSelector((s : any) => s['userService'])\n    const contextData = {\n        profileReady : false,\n        isLoading : true\n    }\n    const [homeContext, setHomeContext] = useReducer(setGlobalToggleFunc, contextData)\n    async function fetchProfile(){\n        try{\n            const profileResponse : IResponse = await API.getProfile()\n            const profile = profileResponse?.data?.message || {}\n            const dispatchData = { name : `${profile.displayName || ''}`, id : profile.id, identity : profile.identity }\n            dispatch({ type : actions.STORE_USER, data : dispatchData })\n            setHomeContext({ profileReady : `${dispatchData.name}`.trim().length > 0 ? true : false, isLoading : false })\n        }catch(e){\n            setHomeContext({ profileReady : false, isLoading : true })\n            toastMessage.next({ message : e, type : false })\n        }\n    }\n    useEffect(() => {\n        const profileName = userService?.name || '';\n        if(!userService?.name){\n            fetchProfile()\n            return\n        }\n        setHomeContext({ profileReady : `${profileName}`.trim().length > 0, isLoading : false })\n        \n    },[])\n    return (\n        <HomeRender {...homeContext}/>\n    )\n}\n","/home/mukul/mukul/messenger/messenger-client/src/components/home/home.render.tsx",["167"],"/home/mukul/mukul/messenger/messenger-client/src/components/login/login.tsx",["168","169"],"import React, { useEffect, useReducer } from 'react'\nimport LoginRender from './login.render'\nimport { useHistory } from \"react-router-dom\";\nimport Routes from '../../utils/routes';\nimport { setGlobalToggleFunc } from '../../shared/utils';\nimport { useDispatch } from 'react-redux';\nimport { IToastStore } from '../../interfaces/redux';\nimport actions from '../../redux/actions';\nimport serverRoutes from '../../utils/server-routes';\nimport API from '../../utils/server';\nimport IApiResponse from '../../interfaces/data-models';\nimport Otp from '../../shared/components/otp/otp';\nimport { AxiosRequestConfig } from 'axios';\nimport BermudaTriangle from '../../shared/localstorage.service';\nexport default function Login() {\n    const history = useHistory()\n    const dispatch  = useDispatch() \n    const loginContextData = { redirect : true, identity : '', otpReady : false, otp : '', isLoading : false, type : '' }\n    const [loginContext, setLoginContext] = useReducer(setGlobalToggleFunc, loginContextData)\n    const authenticate = async (identity : string, type : 'Login' | 'google' | 'Register') => {\n        try{\n            if(type === 'google'){\n                window.location.href = serverRoutes.GOOGLE;\n                return;\n            }\n            setLoginContext({ isLoading : true, type : type, identity : identity})\n            const response : IApiResponse = await (type === 'Login' ? API.login : API.register)(identity, false)\n            dispatch({ type : actions.TOAST_MESSAGE, data : { type : true, message : `OTP sent to ${identity}` } })\n            setLoginContext({ isLoading : false, otpReady : true })\n            console.log(response)\n        }catch(e){\n            setLoginContext({ isLoading : false })\n            dispatch({ type : actions.TOAST_MESSAGE, data : { type : false, message : e } })\n        }\n    }\n    const setStorage = (token : string, refreshToken : string) : void => {\n        BermudaTriangle.setTriangle('token', token)\n        BermudaTriangle.setTriangle('refreshToken',refreshToken)\n    }\n    const submitOtp = async (otp : string) => {\n        try{\n            setLoginContext({ isLoading : true, otpReady : false })\n            const response : AxiosRequestConfig = await (loginContext.type === 'Login' ? API.login : API.register)(loginContext.identity, true, otp)\n            const data = response.data.message;\n            setStorage(data.token, data.refresh_token)\n            if(response.data.statusCode === 201){\n                const dispatchData = { identity: loginContext.identity, name: '', image: null, id : data.id }\n                dispatch({ type : actions.STORE_USER, data : dispatchData })\n                setLoginContext({ isLoading : false })\n                history.push({ pathname: '/profile', state: { header: 'Complete your profile', identity: loginContext.identity } })\n                return\n            }\n            const profileResponse : AxiosRequestConfig = await API.getProfile()\n            const { userId, displayName } = profileResponse.data.message;\n            dispatch({ type : actions.STORE_USER, data : { identity: loginContext.identity, name: displayName, image: null, id : userId } })\n            history.push({ pathname: '/home'})\n        }catch(e){\n            setLoginContext({ isLoading : false, otpReady : true })\n            dispatch({ type : actions.TOAST_MESSAGE, data : { type : false, message : e } })\n        }\n    }\n    useEffect(() => {\n        document.title = 'Messenger';\n        if (BermudaTriangle.isFree()) {\n            document.title = 'Messenger - Login';\n            setLoginContext({ redirect: false })\n        } else {\n            history.push(Routes.home)\n        }\n    }, []);\n    const otp = loginContext.otpReady ?\n    <Otp \n        verifyOtp={submitOtp} \n        resend={() => authenticate(loginContext.identity, loginContext.type)} \n        cancelOtp={() => setLoginContext({ otpReady: false })} \n    /> : null;\n\n    return (\n        loginContext.redirect ? null :\n        <>\n            <LoginRender {...loginContext} authenticate={authenticate}/>\n            {otp}\n        </>\n    )\n}\n","/home/mukul/mukul/messenger/messenger-client/src/components/login/login.render.tsx",[],"/home/mukul/mukul/messenger/messenger-client/src/shared/material-modules.ts",[],"/home/mukul/mukul/messenger/messenger-client/src/shared/utils.ts",[],"/home/mukul/mukul/messenger/messenger-client/src/redux/index.ts",[],"/home/mukul/mukul/messenger/messenger-client/src/utils/routes.ts",[],"/home/mukul/mukul/messenger/messenger-client/src/components/profile/profile.tsx",["170","171"],"import React, { useEffect, useReducer } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport Routes from '../../utils/routes';\nimport API from '../../utils/server';\nimport Utils, { setGlobalToggleFunc, toastMessage } from '../../shared/utils';\nimport ProfileRenderer from './profile.render';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { IUserStore } from '../../interfaces/redux';\nimport actions from '../../redux/actions';\nimport BermudaTriangle from '../../shared/localstorage.service';\nexport default function Profile() {\n    const userStore : IUserStore = useSelector((state : any) => state.userService)\n    const dispatch = useDispatch()\n    const history = useHistory();\n    const stateData = { loading: true, name: '', blob: null, user: userStore.id , profileTouched: {} };\n    const [state, setState] = useReducer(setGlobalToggleFunc, stateData);\n    const updateProfile = async () => {\n        try {\n            if (Object.keys(state.profileTouched).length > 0) {\n                setState({ loading: true })\n                let params = [state.name, state.blob];\n                if (!state.profileTouched.blob) {\n                    params.pop();\n                }\n                await API.updateProfile(state.name)\n                setState({ loading: false })\n                const dispatchData = { name: state.name, blob: state.blob }\n                dispatch({ type : actions.STORE_USER, data : dispatchData })\n                toastMessage.next({ type: true, message: 'Profile updated successfully' });\n            }\n            history.push(Routes.home)\n        } catch (e) {\n            setState({ loading: false })\n            toastMessage.next({ type: false, message: e, duration: 2000 })\n        }\n    }\n    const getProfile = async () => {\n        document.title = 'Messenger - Profile';\n        console.log(userStore);\n        if (BermudaTriangle.isFree()) {\n            history.push(Routes.login);\n        }\n        else if (!userStore.name) {\n            try {\n                setState({ loading: true })\n                const profileResponse: any = await API.getProfile();\n                const profile = profileResponse.data?.message;\n                setState({ loading: false })\n                let dispatchData = {}\n                if (profile.displayName) {\n                    // const blob = null//`${profile.image_blob}` == 'null' ? null : profile.image_blob;\n                    dispatchData = { name: profile.displayName, image: null , identity : profile.identity }\n                } else {\n                    dispatchData = { name: profile.displayName, id: profile.id, identity : profile.identity }\n                }\n                setState({ loading: false, name: profile.displayName, blob: null, user: profile.identity })\n                dispatch({ type : actions.STORE_USER, data : dispatchData})\n                } catch (e) {\n                setState({ loading: false })\n                toastMessage.next({ type: false, message: e })\n            }\n        } else {\n            setState({ loading: false, name: userStore.name, blob: userStore.image, user: userStore.identity })\n        }\n    }\n    useEffect(() => { getProfile(); }, [])\n    return (<ProfileRenderer {...state} updateProfile={updateProfile} setForm={setState} />)\n}","/home/mukul/mukul/messenger/messenger-client/src/components/thridpartylogin/thridpartylogin.tsx",["172","173"],"import React, { useEffect, useState } from 'react'\nimport Backdrop from '@material-ui/core/Backdrop';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport API from '../../utils/server';\nimport { IResponse } from '../../interfaces/data-models';\nimport BermudaTriangle from '../../shared/localstorage.service';\nimport actions from '../../redux/actions';\nimport { useDispatch } from 'react-redux';\nimport { useHistory } from 'react-router-dom';\n// import Api from '../../shared/server';\n// import Routes from '../../shared/routes';\nexport default function ThirdPartyLogin() {\n    const dispatch  = useDispatch()\n    const history  = useHistory()\n    useEffect(() => {\n        try {\n            const url = window.location.href.split('#')[1].split('&')\n            const code = url.filter(a => a.split('=')[0] === 'access_token')[0].split('=')[1]\n            storeIdentity(code)\n        } catch (e) {\n            history.push({ pathname: '/login'})\n        }\n    },[])\n    const setStorage = (token : string, refreshToken : string) : void => {\n        BermudaTriangle.setTriangle('token', token)\n        BermudaTriangle.setTriangle('refreshToken',refreshToken)\n    }\n    const storeIdentity = async (accessToken: any) => {\n        try{\n            const response : IResponse = await API.authorize('google', accessToken)\n            const message = response?.data?.message;\n            if(message.token){\n                setStorage(message.token, message.refresh_token)\n                if(message.statusCode === 201){\n                    const dispatchData = { identity: message.identity, name: '', image: null, id : message.id }\n                    dispatch({ type : actions.STORE_USER, data : dispatchData })\n                    history.push({ pathname: '/profile', state: { header: 'Complete your profile', identity: message.identity } })\n                    return\n                }\n                const profileResponse : IResponse = await API.getProfile()\n                const { id, displayName } = profileResponse?.data?.message;\n                dispatch({ type : actions.STORE_USER, data : { identity: message.identity, name: displayName || '', image: null, id : id } })\n                history.push({ pathname: '/home'})\n            }else{\n                history.push({ pathname: '/login'})\n            }\n        }\n        catch(e){\n            console.log(e)\n            history.push({ pathname: '/login'})\n        }\n    }\n    return (\n            <Backdrop open={true}><CircularProgress color=\"inherit\" /></Backdrop>\n    )\n}","/home/mukul/mukul/messenger/messenger-client/src/shared/components/toast/toast.tsx",[],"/home/mukul/mukul/messenger/messenger-client/src/redux/reducers.ts",["174"],"import { IAction } from \"../interfaces/redux\"\nimport Friend, { Message } from \"../shared/services/messages.reducer\"\nimport actions, { MESSAGE_ACTIONS } from \"./actions\"\n// const message = new Message()\nfunction userStore(store = {}, action : IAction){\n    if(actions.STORE_USER){\n        return { ...store, ...action.data }\n    }\n    else if(actions.RESET_USER === action.type){\n        return {}\n    }\n    return store\n}\nfunction messagesStore(friend = new Friend(), action : IAction){\n    if(action.type === MESSAGE_ACTIONS.ADD_FRIEND){\n        const args = action.data;\n        friend.addFriend(args)\n    }\n    else if(action.type === MESSAGE_ACTIONS.ADD_FRIENDS){\n        const args = action.data;\n        friend.addFriends(args)\n    }\n    else if(action.type === MESSAGE_ACTIONS.RESET_FRIENDS){\n        friend = new Friend()\n    }\n    else if(action.type === MESSAGE_ACTIONS.SET_FRIEND_ACTIVE){\n        const id = action?.data?.id\n        friend.setFriendActive(id)\n    }\n    else if(action.type === MESSAGE_ACTIONS.REMOVE_FRIEND){\n        const id = action?.data?.id\n        if(friend.removeFriend(id)){\n            friend.setFriendActive('')\n        }\n    }\n    return friend\n}\nfunction toastStore(store = {}, action : IAction){\n    if(action.type === actions.TOAST_MESSAGE){\n        return { message : action.data.message, type : action.data.type, rand : new Date().valueOf() }\n    }\n    return store\n}\nfunction loaderStore(store = {}, action : IAction){\n    if(action.type === actions.SHOW_LOADER){\n        return { id : new Date().valueOf(), type : true }\n    }\n    else if(action.type === actions.STOP_LOADER){\n        return { id : new Date().valueOf(), type : false }\n    }\n    return store\n}\n\nexport { userStore, messagesStore, toastStore, loaderStore }","/home/mukul/mukul/messenger/messenger-client/src/components/profile/profile.render.tsx",["175"],"import React, { createRef } from 'react';\nimport './profile.scss'\nimport emptyProfile from '../../assets/emptyProfile.webp';\nimport { TextField, Button, CircularProgress } from '../../shared/material-modules';\nexport default function ProfileRenderer(props: any) {\n    const { loading, name, user, setForm, updateProfile, blob, profileTouched } = props;\n    const fileInp = (createRef() as any);\n    const setProfileImage = (evt: any) => {\n        var f = evt.target.files[0];\n        if (f) {\n            const r = new FileReader();\n            r.onload = (e: any) => setForm({ blob: e.target.result, profileTouched: { ...profileTouched, blob: true } })\n            r.readAsDataURL(f);\n        }\n    }\n    return (\n        <>\n            <input type='file' hidden id='hidden-file' ref={fileInp} onChange={setProfileImage} />\n            <div className=\"profile-layout\">\n                <p id='heading'>My Profile</p>\n                <div className=\"profile\">\n                    <div className=\"profile-form\">\n                        <div className=\"profile-img\">\n                            <img src={blob ? blob : emptyProfile} width=\"100px\" height=\"100px\" onClick={e => fileInp.current.click()} />\n                            {\n                                blob ?\n                                    <div className=\"remove-img\" onClick={e => setForm({ blob: null, profileTouched: { ...profileTouched, blob: true } })}>x</div>\n                                    : null\n                            }\n                        </div>\n                        <div className=\"profile-name form-inp\">\n                            <div id='inp-text'><strong>Name</strong></div>\n                            <TextField\n                                id=\"outlined-basic\"\n                                placeholder=\"Name\"\n                                variant=\"outlined\"\n                                className=\"input-text\"\n                                disabled={loading}\n                                value={name || ''}\n                                onChange={e => setForm({ name: e.target.value, profileTouched: { ...profileTouched, name: true } })}\n                            />\n                        </div>\n                        <div className=\"profile-emailMobile form-inp\">\n                            <div id='inp-text'><strong>Email or Mobile</strong></div>\n                            <TextField\n                                id=\"outlined-basic\"\n                                placeholder=\"Email or Mobile\"\n                                variant=\"outlined\"\n                                className=\"input-text\"\n                                disabled={true}\n                                value={user || ''}\n                            />\n                        </div>\n                        <div className=\"submit-profile\">\n                            <Button variant=\"contained\" color=\"primary\"\n                                disabled={loading}\n                                onClick={e => updateProfile()}\n                            >\n                                {\n                                    loading ?\n                                        <CircularProgress className=\"submit-profile__loader\" /> :\n                                        'Submit'\n                                }\n                            </Button>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </>\n    )\n}","/home/mukul/mukul/messenger/messenger-client/src/components/home/home-components/navbar/navbar.tsx",[],"/home/mukul/mukul/messenger/messenger-client/src/components/home/home-components/chat-section/chat.tsx",[],"/home/mukul/mukul/messenger/messenger-client/src/components/home/home-components/requests/request.tsx",["176","177","178"],"/home/mukul/mukul/messenger/messenger-client/src/components/home/home-components/chat-section/chat.render.tsx",["179","180"],"import React, { createRef, useState } from 'react'\nimport ChatFriends from './chat-components/chat-friends/chat-friends'\nimport MessageArea from './chat-components/message-area/message-area'\nimport MessageAreaRender from './chat-components/message-area/message-area.render'\nimport './chat.scss'\nexport default function ChatRender() {\n    const [friendRef, setFriendRef] = useState<any>(createRef())\n    return (\n        <div className=\"chat-render\">\n            <div className=\"chat-render--chatfriends\" id='chat-friends' ref={friendRef}>\n                <ChatFriends/>\n            </div>\n            <div className=\"chat-render--chatfriends-mob\" onClick={() => friendRef.current.classList.toggle('chat-render-showFriends')}>\n                <div>F</div>\n                <div>R</div>\n                <div>I</div>\n                <div>E</div>\n                <div>N</div>\n                <div>D</div>\n                <div>S</div>\n            </div>\n            <div className=\"chat-render--messagearea\">\n                <MessageArea/>\n            </div>\n        </div>\n    )\n}\n","/home/mukul/mukul/messenger/messenger-client/src/components/home/home-components/navbar/navbar.render.tsx",["181","182","183"],"import React, { useEffect, useState } from 'react'\nimport { Link, useHistory } from 'react-router-dom';\nimport BermudaTriangle from '../../../../shared/localstorage.service';\nimport { HomeIcon, PersonIcon, SearchIcon, MeetingRoomIcon } from '../../../../shared/material-modules'\nimport { logoutService } from '../../../../shared/utils';\nimport Routes from '../../../../utils/routes';\nimport './navbar.scss'\nexport default function NavbarRender() {\n    const history = useHistory()\n    const [navbarContext, setNavbarContext] = useState<string>('')\n    useEffect(() => {\n        const path: string[] = window.location.pathname.split('/');\n        setNavbarContext(path[path.length - 1])\n    }, []);\n    useEffect(() => {\n        const path: string[] = window.location.pathname.split('/');\n        setNavbarContext(path[path.length - 1])\n    },[navbarContext])\n    const logout = () => logoutService.next()\n    const onNavSelect = (type: string) : void => setNavbarContext(type)\n    return (\n        <div className=\"navbar\">\n            <div className=\"nav-items\">\n                <Link to=\"/home\" className={navbarContext === 'home' ? 'nav--item nav-active' : 'nav--item'} onClick={() => onNavSelect('home')}>\n                    <HomeIcon/>\n                    <span>Home</span>\n                </Link>\n                <Link to=\"/profile\"  className=\"nav--item\" onClick={() => onNavSelect('profile')}>\n                    <PersonIcon/>\n                    <span>Profile</span>\n                </Link>\n                <Link to=\"/home/requests\" className={navbarContext === 'requests' ? 'nav--item  nav-active' : 'nav--item'} onClick={() => onNavSelect('requests')}>\n                    <SearchIcon/>\n                    <span>\n                        Search\n                    </span>\n                </Link>\n                <div className=\"nav--item\" onClick={logout}>\n                    <MeetingRoomIcon/>\n                    <span>Logout</span>\n                </div>\n            </div>\n        </div>\n    )\n}\n","/home/mukul/mukul/messenger/messenger-client/src/components/home/home-components/requests/requestRender.tsx",["184","185"],"/home/mukul/mukul/messenger/messenger-client/src/redux/actions.ts",[],"/home/mukul/mukul/messenger/messenger-client/src/shared/components/backdrop/backdrop.tsx",[],"/home/mukul/mukul/messenger/messenger-client/src/utils/server.ts",["186","187"],"import sR from './server-routes'\nimport axios, { AxiosRequestConfig } from 'axios'\nimport Utils, { logoutService, toastMessage } from '../shared/utils';\nimport BermudaTriangle from '../shared/localstorage.service';\nexport default class API{\n    public static nonSecretEndPoints = [sR.BASE + sR.LOGIN, sR.BASE + sR.REGISTER, sR.BASE + sR.LOGIN, sR.BASE + sR.AUTHORIZE]\n    public static initApiInterceptor() {\n        axios.interceptors.request.use(\n            (config: any) => {\n                if (!this.nonSecretEndPoints.includes(config.url)) {\n                    const token = BermudaTriangle.getTriangle('token');\n                    if (!token) {\n                        logoutService.next()\n                        toastMessage.next({ message: 'Re-Login again', type: false, duration: 5000, logout: true });\n                        return;\n                    }\n                    config.headers = { ...config.headers, token: token, type: \"WEB-MESSENGER\" };\n                    return config;\n                }\n                config.headers = { ...config.headers, type: \"WEB-MESSENGER\" };\n                return config;\n            },\n            (error) => Promise.reject({ type: \"intercept\", message: sR.clientAccessDenied })\n        );\n        axios.interceptors.response.use((null as any), (error : any) => {\n            const pendingRequest = error.config;\n            if (\n                error?.response?.status === 401 &&\n                !this.nonSecretEndPoints.includes(error.config.url) &&\n                !pendingRequest._retry\n            ) {\n                pendingRequest._retry = true;\n                axios.get(sR.BASE + sR.REFRESH + `?token=${BermudaTriangle.getTriangle('refreshToken')}`). \n                then(response => {\n                    if(response.status === 200 && response.data?.message){\n                        BermudaTriangle.setTriangle('refreshToken', response.data?.message?.refresh_token)\n                        BermudaTriangle.setTriangle('token', response.data?.message?.token)\n                        // return axios(pendingRequest)\n                        window.location.reload()\n                    }else{\n                        logoutService.next()\n                        toastMessage.next({ message: 'Re-Login again', type: false, duration: 5000, logout: true });\n                    }\n                }). \n                catch(e => {\n                    logoutService.next()\n                    toastMessage.next({ message: 'Re-Login again', type: false, duration: 5000, logout: true });\n                })\n            }\n            return Promise.reject(error);\n        });\n    }\n    public static login(identity : string, isOtp : boolean, otp ?:string) : Promise<any> {\n        return new Promise((resolve, reject) => {\n            const body = { identity : identity, otp :  isOtp ? otp : null}\n            axios.post(sR.BASE+sR.LOGIN, body).then((response: AxiosRequestConfig) => resolve(response)).catch(e => reject(Utils.parseError(e)))\n        })\n    }\n\n    public static register(identity : string, isOtp : boolean, otp ?:string) : Promise<any> {\n        return new Promise((resolve, reject) => {\n            const body = { identity : identity, otp :  isOtp ? otp : null}\n            axios.post(sR.BASE+sR.REGISTER, body).then((response: AxiosRequestConfig) => resolve(response)).catch(e => reject(Utils.parseError(e)))\n        })\n    }\n\n    public static getProfile(id ?: string[]) : Promise<any> {\n        return new Promise((resolve, reject) => {\n            const url = sR.BASE+sR.PROFILE\n            if(!id){\n                return axios.get(url).then((response: AxiosRequestConfig) => resolve(response)).catch(e => reject(Utils.parseError(e)))\n            }\n            axios.post(url, id).then((response: AxiosRequestConfig) => resolve(response)).catch(e => reject(Utils.parseError(e)))\n        })\n    }\n\n    public static updateProfile(name : string): Promise<any> {\n        return new Promise((resolve, reject) => {\n            axios.put(sR.BASE+sR.PROFILE, { displayName : name }).then((response: AxiosRequestConfig) => resolve(response)).catch(e => reject(Utils.parseError(e)))\n        })\n    }\n\n    public static getNetwork(type : string, start : number = 0, count : number = 10) : Promise<any> {\n        return new Promise((resolve, reject)=>{\n            const url = sR.BASE+sR.SOCIAL.network+type+`?start=${start}&count=${count}`\n            axios.get(url).then((response: AxiosRequestConfig) => resolve(response)).catch(e => reject(Utils.parseError(e)))\n        })\n    }\n\n    public static searchUsers(userName : string, start : number = 0, count : number = 10) : Promise<any>{\n        return new Promise((resolve, reject)=>{\n            const url = sR.BASE+sR.SOCIAL.search+`?name=${userName}&count=${count}&start=${start}`\n            axios.get(url).then((response: AxiosRequestConfig) => resolve(response)).catch(e => reject(Utils.parseError(e)))\n        })\n    }\n\n    public static networkAction(type : string, targetId : string, isAcceptOrReject ?: 'accept' | 'reject') : Promise<any> {\n        let url = sR.BASE+sR.SOCIAL.action+`${type}/${targetId}`\n        if(type === 'respond'){\n            url += `?answer=${isAcceptOrReject}`\n        }\n        return new Promise((resolve, reject)=>{\n            axios.get(url).then((response: AxiosRequestConfig) => resolve(response)).catch(e => reject(Utils.parseError(e)))\n        })\n    }\n\n    public static authorize(type : string, token : string) : Promise<any>{\n        return new Promise((resolve, reject)=>{\n            const headers = { loginType : type, token : token }\n            axios.get(sR.BASE+sR.AUTHORIZE, { headers : headers }).then((response: AxiosRequestConfig) => resolve(response)).catch(e => reject(Utils.parseError(e)))\n        })\n    }\n\n}","/home/mukul/mukul/messenger/messenger-client/src/utils/server-routes.ts",[],"/home/mukul/mukul/messenger/messenger-client/src/shared/components/otp/otp.tsx",["188","189","190"],"import React, { createRef, useEffect, useState } from 'react';\nimport './otp.scss'\nimport {\n    Dialog, Button, ReplayIcon, CloseIcon, CheckCircleOutlineIcon\n} from '../../material-modules';\nexport default function Otp(props: any) {\n    const { verifyOtp, resend } = props;\n    const [focusOn, setFocusOn] = useState(0)\n    const [values, setValues] = useState(({ 0: '', 1: '', 2: '', 3: '', 4: '', 5: '' } as any))\n    const [focuses, setFocuses] = useState((Array(6).fill(true).map(_ => createRef()) as any))\n    const [otpValid, setOtpValid] = useState(('' as any))\n    const [inProgress, setInProgress] = useState(false)\n    const onClic = (e: any) => {\n        setFocusOn(e)\n    }\n    useEffect(() => {\n        const otp = Object.values(values).map(v => v).join('')\n        if (`${otp}`.length === 6) {\n            setOtpValid(otp)\n            return;\n        }\n        setOtpValid(null)\n    }, [values])\n\n    const resendOtp = (e: any) => {\n    }\n\n    const onKeyU = (e: any, i: number) => {\n        if (e.key <= 9 || e.key >= 0) {\n            if (i < 5) {\n                setFocusOn(i + 1)\n                focuses[i + 1].current.focus()\n            }\n        }\n    }\n    const verify = () => {\n        if (!otpValid || inProgress) { return }\n        verifyOtp(otpValid);\n    }\n    const onKeyP = (e: any, i: number) => {\n        if (e.keyCode === 13) {\n            verify()\n            return;\n        }\n        if (e.keyCode === 8 && (focusOn) > 0) {\n            const cV: any = { ...values }\n            cV[i] = ''\n            setValues(cV)\n            if (values[i] === '') {\n                setFocusOn(focusOn - 1)\n                focuses[focusOn - 1].current.focus()\n            }\n        }\n    }\n\n    const onChang = (e: any, i: number) => {\n        const val = `${e.target.value}`;\n        if (!isNaN(Number(val))) {\n            const cV: any = { ...values }\n            cV[i] = val.length === 1 ? val : val.charAt(val.length - 1)\n            setValues(cV)\n        }\n    }\n    const isEnabled = otpValid && !inProgress\n    return (\n        <div className='otp-parent'>\n            <Dialog\n                open={true}>\n                <div className='otp-modal'>\n                    <div className='goBack'>\n                        {\n                            !inProgress ?\n                                <CloseIcon className=\"close-otp\" onClick={(e : any) => {\n                                    if (!inProgress) { props.cancelOtp() }\n                                }} /> :\n                                null\n                        }\n\n                    </div>\n                    <div className=\"otp-title\">\n                        Enter OTP\n                    </div>\n                    <div className=\"otp-input\">\n                        {Array(6).fill(true).map((v, i) => {\n                            return <input\n                                className='otp-inp'\n                                key={i}\n                                ref={focuses[i]}\n                                id={`otp-inp-${i}`}\n                                // autoFocus={i == focusOn}\n                                onClick={e => onClic(i)}\n                                onKeyPress={e => onKeyU(e, i)}\n                                value={values[i]}\n                                onKeyDown={e => onKeyP(e, i)}\n                                onChange={e => onChang(e, i)}\n                                onFocus={e => e.target.select()}\n                                autoFocus={i === 0}\n                            />\n                        })}\n                    </div>\n                    <div className=\"otp-btns\">\n                        <span className='otp-verify'>\n                            <Button\n                                variant=\"contained\"\n                                className={isEnabled ? 'otp-verify-btn' : 'otp-verify-btn bg-empty-dis'}\n                                onClick={verify}\n                                disabled={!isEnabled}\n                            >\n                                Verify\n                                <CheckCircleOutlineIcon className=\"icon\" />\n                            </Button>\n                        </span>\n                        <span className='otp-resend'>\n                            <Button\n                                variant=\"contained\"\n                                className={!inProgress ? 'otp-resend-btn' : 'otp-resend-btn bg-empty-dis'}\n                                disabled={inProgress}\n                                onClick={resend}\n                            >\n                                Resend\n                                <ReplayIcon className=\"icon\" />\n                            </Button>\n                        </span>\n                    </div>\n                </div>\n            </Dialog>\n        </div>)\n}","/home/mukul/mukul/messenger/messenger-client/src/components/home/home-components/chat-section/chat-components/chat-friends/chat-friends.tsx",["191","192"],"import React, { useEffect, useReducer } from 'react'\nimport { useDispatch, useSelector } from 'react-redux';\nimport { IResponse } from '../../../../../../interfaces/data-models';\nimport { MESSAGE_ACTIONS } from '../../../../../../redux/actions';\nimport Friend, { _Friend } from '../../../../../../shared/services/messages.reducer';\nimport { setGlobalToggleFunc, toastMessage } from '../../../../../../shared/utils';\nimport API from '../../../../../../utils/server';\nimport ChatFriendsRender from './chat-friends-render'\nexport default function ChatFriends() {\n    const dispatch = useDispatch()\n    const { friends, activeFriendId } = useSelector((s : any) => s['messagesService']) \n    const contextData = {\n        isLoading : false\n    }\n    const [chatContext, setHomeContext] = useReducer(setGlobalToggleFunc, contextData)\n    async function fetchFriends(){\n        setHomeContext({ isLoading : true })\n        try{\n            const friendResponse : IResponse = await API.getNetwork('friend', 0, 999999)\n            if(friendResponse.data?.message?.length > 0){\n                const profiles : IResponse = await API.getProfile(friendResponse.data?.message.map((user : any) => user.id))\n                const profileResp = profiles.data?.message || []\n                const users = profileResp.map((profile : any) => new _Friend().createFriend(profile.id, profile.displayName))\n                if(users.length > 0){\n                    dispatch({ type : MESSAGE_ACTIONS.ADD_FRIENDS, data : users })\n                }\n                setHomeContext({ isLoading : false })\n            }else{\n                // dispatch({ type : MESSAGE_ACTIONS.ADD_FRIEND, data : [] })\n                setHomeContext({ isLoading : false })\n            }\n        }catch(e){\n            setHomeContext({ isLoading : false })\n            toastMessage.next({ message : e, type : false })\n        }\n    }\n    function setActiveFriend(friendId : string){\n        if(activeFriendId === friendId) return\n        dispatch({ type : MESSAGE_ACTIONS.SET_FRIEND_ACTIVE, data : { id : friendId }})\n    }\n    useEffect(() => {\n        if(friends.length === 0){\n            fetchFriends()\n        }\n    },[])\n    return (\n        <ChatFriendsRender \n            {...chatContext} \n            activeFriend={activeFriendId} \n            friends={friends}\n            setActiveFriend={setActiveFriend}\n        />\n    )\n}\n","/home/mukul/mukul/messenger/messenger-client/src/components/home/home-components/chat-section/chat-components/message-area/message-area.render.tsx",["193","194","195","196"],"import React, { useEffect, useReducer } from 'react'\nimport defaultPic from '../../../../../../assets/emptyProfile.webp'\nimport './message-area.scss'\nimport { Menu, MenuItem, MoreVertIcon, TextField } from '../../../../../../shared/material-modules'\nimport selectUser from '../../../../../../assets/select-user.svg'\nimport noMessages from '../../../../../../assets/no-messages.svg'\nimport { setGlobalToggleFunc } from '../../../../../../shared/utils'\n\nexport default function MessageAreaRender(props : any) {\n    const {\n        isLoading,\n        friends,\n        activeFriend,\n        selectedFriend,\n        removeFriend,\n        onRemoveFriend\n    } = props;\n    const renderContextData = {\n        menuActive : false\n    }\n    const [messageRenderContext, setMessageRenderContext] = useReducer(setGlobalToggleFunc, renderContextData)\n    useEffect(() => {\n        setMessageRenderContext({menuActive : false})\n    },[activeFriend])\n    return (\n        activeFriend && selectedFriend['name']?\n        <div className=\"message-area-render\">\n            <div className=\"message-profile\">\n                <div className=\"selected-pro\">\n                    <div className=\"profile--pic\">\n                        <img src={defaultPic} className=\"d_ps\" />\n                    </div>\n                    <div className=\"profile--name\">\n                        {selectedFriend['name']}\n                    </div>\n                </div>\n                <MoreVertIcon \n                    className=\"remove-friend-btn\" \n                    onClick={(e) => setMessageRenderContext({ menuActive : e.currentTarget })}\n                />\n                <Menu\n                    anchorEl={messageRenderContext.menuActive}\n                    open={messageRenderContext.menuActive ? true : false}\n                    onClose={() => setMessageRenderContext({ menuActive : false })}\n                >\n                    <MenuItem onClick={() => onRemoveFriend(selectedFriend['id'])}>{ removeFriend[selectedFriend['id']] ? 'Removing...' : 'Remove' }</MenuItem>\n                </Menu>\n            </div>\n            <div className=\"messages-area\">\n                {\n                    selectedFriend.Messages.length > 0 ?\n                       <>\n                            <div className='message-area-me'>\n                                <p>\n                                    Lorem ipsum dolor, sit amet consectetur adipisicing\n                                </p>\n                            </div>\n                            <div className=\"message-area-friend\">\n                                <p>\n                                    Lorem ipsum dolor, sit amet consectetur adipisicing\n                                </p>\n                            </div>\n                        </>\n                    :\n                    <div className=\"no-messages-f\">\n                        <img src={noMessages} />\n                        <div>Oops no conversations found!</div>\n                    </div>\n                }\n            </div>\n            <div className=\"send-message-area\">\n                <TextField \n                    id=\"outlined-basic\" \n                    variant=\"outlined\" \n                    rowsMax={2} \n                    multiline\n                    placeholder=\"Type a message\"\n                    className=\"text-msg-inp\"\n                />\n                <button className=\"default-input\">Send</button>\n            </div>\n        </div>\n        : <div className=\"message-area-render no-user-selected\">\n            <img src={selectUser} alt=\"\"/>\n            <p>Select a Friend and Start Chatting!</p>\n        </div>\n    )\n}\n","/home/mukul/mukul/messenger/messenger-client/src/components/home/home-components/chat-section/chat-components/chat-friends/chat-friends-render.tsx",["197"],"import React from 'react'\nimport './chat-friends.scss'\nimport defaultPic from '../../../../../../assets/emptyProfile.webp'\nimport noFriends from '../../../../../../assets/no-friends.svg'\nimport { ArrowBackIosIcon, CircularProgress } from '../../../../../../shared/material-modules'\nexport default function ChatFriendsRender(props : any) {\n    const {\n        isLoading,\n        friends,\n        setActiveFriend,\n        activeFriend\n    } = props;\n    return (\n        <div className=\"ChatFriendsRender\">\n            <div className=\"search-friends\">\n                <div className=\"search-chat-bar\">\n                    <p>Search</p>\n                    <div className=\"hide-friends\">\n                        <ArrowBackIosIcon onClick={() => {\n                            window.document?.getElementById('chat-friends')?.classList?.remove('chat-render-showFriends')\n                        }}/>\n                    </div>\n                </div>\n                <input disabled={friends.length === 0} type=\"text\" className=\"default-input\" placeholder=\"Enter Friend Name...\"/>\n            </div>\n            <div className=\"chat-friends-circle\">\n                {\n                    friends.map((f : any) => {\n                        return <div className={f.id === activeFriend ? 'friend-circle f-c-selected' : 'friend-circle'} key={f.id} onClick={() => setActiveFriend(f.id)}>\n                        <div className=\"friend-image\">\n                            <img className=\"d_ps\" src={defaultPic} alt=\"Mukul\"/>\n                        </div>\n                        <div className=\"friend-name\">\n                            {f.name}\n                        </div>\n                        <div className=\"friend-status\"></div>\n                    </div>\n                    })\n                }\n                <>\n                {\n                    isLoading || friends.length === 0?\n                    <div className=\"loading-friends\">\n                    {\n                        isLoading ?\n                        <>\n                            <CircularProgress/>\n                            <p>Loading Friends</p>\n                        </>:\n                        friends.length === 0 ?\n                        <>\n                            <img src={noFriends}/>\n                            <p>No Friends Found</p>\n                        </>:null\n                    }\n                    </div>:null\n                }\n                </>\n            </div>\n        </div>\n    )\n}\n","/home/mukul/mukul/messenger/messenger-client/src/shared/localstorage.service.ts",[],"/home/mukul/mukul/messenger/messenger-client/src/shared/services/request.sent.tsx",[],"/home/mukul/mukul/messenger/messenger-client/src/shared/services/request.incoming.tsx",[],"/home/mukul/mukul/messenger/messenger-client/src/shared/services/request.search.tsx",[],"/home/mukul/mukul/messenger/messenger-client/src/shared/services/messages.reducer.ts",[],"/home/mukul/mukul/messenger/messenger-client/src/components/home/home-components/chat-section/chat-components/message-area/message-area.tsx",["198"],"/home/mukul/mukul/messenger/messenger-client/src/components/home/socket.context.tsx",[],{"ruleId":"199","replacedBy":"200"},{"ruleId":"201","replacedBy":"202"},{"ruleId":"203","severity":1,"message":"204","line":7,"column":5,"nodeType":"205","messageId":"206","endLine":7,"endColumn":15},{"ruleId":"207","severity":1,"message":"208","line":46,"column":7,"nodeType":"209","endLine":46,"endColumn":9,"suggestions":"210"},{"ruleId":"203","severity":1,"message":"211","line":11,"column":11,"nodeType":"205","messageId":"206","endLine":11,"endColumn":18},{"ruleId":"207","severity":1,"message":"212","line":38,"column":7,"nodeType":"209","endLine":38,"endColumn":9,"suggestions":"213"},{"ruleId":"203","severity":1,"message":"214","line":5,"column":5,"nodeType":"205","messageId":"206","endLine":5,"endColumn":18},{"ruleId":"203","severity":1,"message":"215","line":7,"column":10,"nodeType":"205","messageId":"206","endLine":7,"endColumn":21},{"ruleId":"207","severity":1,"message":"216","line":70,"column":8,"nodeType":"209","endLine":70,"endColumn":10,"suggestions":"217"},{"ruleId":"203","severity":1,"message":"218","line":5,"column":8,"nodeType":"205","messageId":"206","endLine":5,"endColumn":13},{"ruleId":"207","severity":1,"message":"219","line":66,"column":40,"nodeType":"209","endLine":66,"endColumn":42,"suggestions":"220"},{"ruleId":"203","severity":1,"message":"221","line":1,"column":28,"nodeType":"205","messageId":"206","endLine":1,"endColumn":36},{"ruleId":"207","severity":1,"message":"222","line":23,"column":7,"nodeType":"209","endLine":23,"endColumn":9,"suggestions":"223"},{"ruleId":"203","severity":1,"message":"224","line":2,"column":18,"nodeType":"205","messageId":"206","endLine":2,"endColumn":25},{"ruleId":"225","severity":1,"message":"226","line":24,"column":29,"nodeType":"227","endLine":24,"endColumn":137},{"ruleId":"203","severity":1,"message":"228","line":2,"column":50,"nodeType":"205","messageId":"206","endLine":2,"endColumn":58},{"ruleId":"207","severity":1,"message":"229","line":130,"column":8,"nodeType":"209","endLine":130,"endColumn":10,"suggestions":"230"},{"ruleId":"207","severity":1,"message":"229","line":135,"column":8,"nodeType":"209","endLine":135,"endColumn":28,"suggestions":"231"},{"ruleId":"203","severity":1,"message":"232","line":4,"column":8,"nodeType":"205","messageId":"206","endLine":4,"endColumn":25},{"ruleId":"203","severity":1,"message":"233","line":7,"column":23,"nodeType":"205","messageId":"206","endLine":7,"endColumn":35},{"ruleId":"203","severity":1,"message":"234","line":3,"column":8,"nodeType":"205","messageId":"206","endLine":3,"endColumn":23},{"ruleId":"203","severity":1,"message":"235","line":6,"column":8,"nodeType":"205","messageId":"206","endLine":6,"endColumn":14},{"ruleId":"203","severity":1,"message":"211","line":9,"column":11,"nodeType":"205","messageId":"206","endLine":9,"endColumn":18},{"ruleId":"225","severity":1,"message":"226","line":122,"column":33,"nodeType":"227","endLine":122,"endColumn":59},{"ruleId":"225","severity":1,"message":"226","line":166,"column":33,"nodeType":"227","endLine":166,"endColumn":59},{"ruleId":"236","severity":1,"message":"237","line":33,"column":106,"nodeType":"238","messageId":"239","endLine":33,"endColumn":107,"fix":"240"},{"ruleId":"236","severity":1,"message":"237","line":44,"column":19,"nodeType":"238","messageId":"239","endLine":44,"endColumn":20,"fix":"241"},{"ruleId":"203","severity":1,"message":"242","line":10,"column":21,"nodeType":"205","messageId":"206","endLine":10,"endColumn":31},{"ruleId":"203","severity":1,"message":"243","line":12,"column":24,"nodeType":"205","messageId":"206","endLine":12,"endColumn":37},{"ruleId":"203","severity":1,"message":"244","line":25,"column":11,"nodeType":"205","messageId":"206","endLine":25,"endColumn":20},{"ruleId":"203","severity":1,"message":"245","line":5,"column":8,"nodeType":"205","messageId":"206","endLine":5,"endColumn":14},{"ruleId":"207","severity":1,"message":"246","line":45,"column":7,"nodeType":"209","endLine":45,"endColumn":9,"suggestions":"247"},{"ruleId":"203","severity":1,"message":"248","line":11,"column":9,"nodeType":"205","messageId":"206","endLine":11,"endColumn":18},{"ruleId":"203","severity":1,"message":"249","line":12,"column":9,"nodeType":"205","messageId":"206","endLine":12,"endColumn":16},{"ruleId":"225","severity":1,"message":"226","line":31,"column":25,"nodeType":"227","endLine":31,"endColumn":66},{"ruleId":"225","severity":1,"message":"226","line":66,"column":25,"nodeType":"227","endLine":66,"endColumn":49},{"ruleId":"225","severity":1,"message":"226","line":52,"column":29,"nodeType":"227","endLine":52,"endColumn":51},{"ruleId":"203","severity":1,"message":"250","line":11,"column":11,"nodeType":"205","messageId":"206","endLine":11,"endColumn":24},"no-native-reassign",["251"],"no-negated-in-lhs",["252"],"@typescript-eslint/no-unused-vars","'useHistory' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.","ArrayExpression",["253"],"'history' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'fetchProfile' and 'userService?.name'. Either include them or remove the dependency array.",["254"],"'BrowserRouter' is defined but never used.","'IToastStore' is defined but never used.","React Hook useEffect has a missing dependency: 'history'. Either include it or remove the dependency array.",["255"],"'Utils' is defined but never used.","React Hook useEffect has a missing dependency: 'getProfile'. Either include it or remove the dependency array.",["256"],"'useState' is defined but never used.","React Hook useEffect has missing dependencies: 'history' and 'storeIdentity'. Either include them or remove the dependency array.",["257"],"'Message' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'IRequest' is defined but never used.","React Hook useEffect has a missing dependency: 'fetchRequest'. Either include it or remove the dependency array.",["258"],["259"],"'MessageAreaRender' is defined but never used.","'setFriendRef' is assigned a value but never used.","'BermudaTriangle' is defined but never used.","'Routes' is defined but never used.","dot-location","Expected dot to be on same line as property.","MemberExpression","expectedDotBeforeProperty",{"range":"260","text":"261"},{"range":"262","text":"261"},"'setFocuses' is assigned a value but never used.","'setInProgress' is assigned a value but never used.","'resendOtp' is assigned a value but never used.","'Friend' is defined but never used.","React Hook useEffect has missing dependencies: 'fetchFriends' and 'friends.length'. Either include them or remove the dependency array.",["263"],"'isLoading' is assigned a value but never used.","'friends' is assigned a value but never used.","'socketContext' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"264","fix":"265"},{"desc":"266","fix":"267"},{"desc":"268","fix":"269"},{"desc":"270","fix":"271"},{"desc":"272","fix":"273"},{"desc":"274","fix":"275"},{"desc":"276","fix":"277"},[1718,1737]," \n                .",[2364,2383],{"desc":"278","fix":"279"},"Update the dependencies array to be: [dispatch]",{"range":"280","text":"281"},"Update the dependencies array to be: [fetchProfile, userService?.name]",{"range":"282","text":"283"},"Update the dependencies array to be: [history]",{"range":"284","text":"285"},"Update the dependencies array to be: [getProfile]",{"range":"286","text":"287"},"Update the dependencies array to be: [history, storeIdentity]",{"range":"288","text":"289"},"Update the dependencies array to be: [fetchRequest]",{"range":"290","text":"291"},"Update the dependencies array to be: [fetchRequest, requestContext.tab]",{"range":"292","text":"293"},"Update the dependencies array to be: [fetchFriends, friends.length]",{"range":"294","text":"295"},[1832,1834],"[dispatch]",[1690,1692],"[fetchProfile, userService?.name]",[3693,3695],"[history]",[3206,3208],"[getProfile]",[982,984],"[history, storeIdentity]",[6569,6571],"[fetchRequest]",[6719,6739],"[fetchRequest, requestContext.tab]",[2177,2179],"[fetchFriends, friends.length]"]